import { supabase } from "../lib/supabase";
import fs from "fs";
import OpenAI from "openai";
import { config } from "./config";

interface PlayerRankData {
	name: string;
	strength: number;
	gang: string;
}

async function extractDataFromImage(
	imagePath: string,
): Promise<PlayerRankData[]> {
	if (!config.openaiApiKey) {
		throw new Error("OpenAI API key is not configured");
	}

	const openai = new OpenAI({
		apiKey: config.openaiApiKey,
	});

	try {
		// –ß–µ—Ç–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ –∫–∞—Ç–æ base64
		const imageBuffer = fs.readFileSync(imagePath);
		const base64Image = imageBuffer.toString("base64");

		const response = await openai.chat.completions.create({
			model: "gpt-4o",
			messages: [
				{
					role: "user",
					content: [
						{
							type: "text",
							text: "–ú–æ–ª—è, –∏–∑–≤–ª–µ—á–∏ —Å–ø–∏—Å—ä–∫–∞ —Å –∏–≥—Ä–∞—á–∏ –æ—Ç —Ç–æ–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ó–∞ –≤—Å–µ–∫–∏ —Ä–µ–¥ –º–∏ –¥–∞–π –∏–º–µ—Ç–æ –Ω–∞ –∏–≥—Ä–∞—á–∞ –∏ —á–∏—Å–ª–æ—Ç–æ –∑–∞ —Å–∏–ª–∞. –û—Ç–≥–æ–≤–æ—Ä–∏ —Å–∞–º–æ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏, –±–µ–∑ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–µ–Ω —Ç–µ–∫—Å—Ç.",
						},
						{
							type: "image_url",
							image_url: {
								url: `data:image/png;base64,${base64Image}`,
							},
						},
					],
				},
			],
			max_tokens: 1000,
		});

		const text = response.choices[0]?.message?.content || "";
		console.log("–ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç:", text);

		const lines = text.split("\n").filter((line) => line.trim());
		const players: PlayerRankData[] = [];

		for (const line of lines) {
			// –ü—Ä–æ–ø—É—Å–∫–∞–º–µ –ø—Ä–∞–∑–Ω–∏ —Ä–µ–¥–æ–≤–µ
			if (!line.trim()) continue;

			// –†–∞–∑–¥–µ–ª—è–º–µ —Ä–µ–¥–∞ –Ω–∞ —á–∞—Å—Ç–∏
			const parts = line.trim().split(/\s+/);

			// –¢—ä—Ä—Å–∏–º –≤—Å–∏—á–∫–∏ —á–∏—Å–ª–æ–≤–∏ —á–∞—Å—Ç–∏
			const numericParts = [];
			let nameEndIndex = -1;

			for (let i = 0; i < parts.length; i++) {
				const part = parts[i];
				// –ü—Ä–æ–ø—É—Å–∫–∞–º–µ –Ω–æ–º–µ—Ä–∞ –≤ –Ω–∞—á–∞–ª–æ—Ç–æ (1., 2., etc.)
				if (i === 0 && part.match(/^\d+\.$/)) {
					continue;
				}

				// –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —á–∞—Å—Ç—Ç–∞ –µ —á–∏—Å–ª–æ
				if (part.match(/^\d+$/)) {
					numericParts.push(part);
					if (nameEndIndex === -1 && i > 0) {
						nameEndIndex = i;
					}
				}
			}

			// –ê–∫–æ –∏–º–∞–º–µ –Ω–∞–º–µ—Ä–µ–Ω–∏ —á–∏—Å–ª–∞
			if (numericParts.length > 0 && nameEndIndex > 0) {
				// –°—ä–µ–¥–∏–Ω—è–≤–∞–º–µ —á–∏—Å–ª–∞—Ç–∞, –∑–∞ –¥–∞ –ø–æ–ª—É—á–∏–º —Å–∏–ª–∞—Ç–∞
				const strength = parseInt(numericParts.join(""));

				// –ò–∑–≤–ª–∏—á–∞–º–µ –∏–º–µ—Ç–æ - –≤—Å–∏—á–∫–æ –ø—Ä–µ–¥–∏ —á–∏—Å–ª–∞—Ç–∞
				let nameParts = parts.slice(0, nameEndIndex);
				// –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –Ω–æ–º–µ—Ä–∞, –∞–∫–æ –µ –æ—Å—Ç–∞–Ω–∞–ª
				if (nameParts[0]?.match(/^\d+\.$/)) {
					nameParts = nameParts.slice(1);
				}

				const name = nameParts.join(" ").trim();

				if (name && !isNaN(strength)) {
					console.log("–ò–∑–≤–ª–µ—á–µ–Ω–∏ –¥–∞–Ω–Ω–∏:", {
						name,
						strength,
						gang: "",
					});

					players.push({
						name,
						strength,
						gang: "",
					});
				}
			}
		}

		return players;
	} catch (error) {
		console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ:", error);
		throw error;
	}
}

async function updateDatabase(players: PlayerRankData[]): Promise<void> {
	for (const player of players) {
		try {
			console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∏–≥—Ä–∞—á: ${player.name}`);

			// –°—ä–∑–¥–∞–≤–∞–Ω–µ –∏–ª–∏ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –∏–≥—Ä–∞—á–∞
			const { data: playerData, error: playerError } = await supabase
				.from("players")
				.upsert({ name: player.name })
				.select()
				.single();

			if (playerError) {
				console.error(
					`–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ/–Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –∏–≥—Ä–∞—á ${player.name}:`,
					playerError,
				);
				throw playerError;
			}

			// –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –¥–Ω–µ–≤–Ω–∞—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
			const { error: statsError } = await supabase.from("daily_stats").insert({
				player_id: playerData.id,
				strength: player.strength,
				experience: 0,
				victories: 0,
				intelligence: 0,
				sex: 0,
			});

			if (statsError) {
				console.error(
					`–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ ${player.name}:`,
					statsError,
				);
				throw statsError;
			}

			console.log(
				`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–µ–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ ${player.name} (–°–∏–ª–∞: ${player.strength})`,
			);
		} catch (error) {
			console.error(
				`‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ ${player.name}:`,
				error,
			);
		}
	}
}

export async function processRankingsImage(imagePath: string): Promise<void> {
	try {
		console.log("üîç –ó–∞–ø–æ—á–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ...");
		const players = await extractDataFromImage(imagePath);
		console.log(`üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏ ${players.length} –∏–≥—Ä–∞—á–∏ –æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ`);

		if (players.length === 0) {
			throw new Error("–ù–µ –±—è—Ö–∞ –æ—Ç–∫—Ä–∏—Ç–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –∏–≥—Ä–∞—á–∏ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ");
		}

		console.log("üíæ –ó–∞–ø–æ—á–≤–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏...");
		await updateDatabase(players);
		console.log("‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!");
	} catch (error) {
		console.error("üî• –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞—Ç–∞:", error);
		throw error;
	}
}
